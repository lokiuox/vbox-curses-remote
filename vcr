#!/usr/bin/python3
import curses
import threading
import queue
import time
import os, sys
import subprocess
import random

hosts = [
	"localhost"
]

class Menu:
	# Static threading "magic"
	# key queue contains key presses
	keyq = queue.Queue()
	screen = None
	x = 0
	y = 0
	loading_scr = None

	@staticmethod
	def show_loading():
		threading.Thread(target=Menu.loading_scr.draw).start()
		

	@staticmethod
	def key_thread():
		while True:
			key = Menu.screen.getch()
			Menu.keyq.put(key)

	@staticmethod
	def global_init(screen, x = 0, y = 0):
		Menu.x = x
		Menu.y = y
		Menu.screen = screen
		t = threading.Thread(target=Menu.key_thread)
		t.setDaemon(True)
		t.start()
		Menu.loading_scr = Menu("Loading...")


	def __init__(self, title=None, prev=None):
		self.items     = []     # Array - MenuItem array

		# Default Values
		self.numeric   = True   # Bool - Use of the numpad
		self.noback    = False  # Bool - Use of the left arrow key to return  
		self.closemenu = False  # Bool - This kills the crab, er... menu
		self.tooltips  = False   # Bool - Display item tooltips under menu title
		self.width     = 1      # Int  - Minimum width of the menu
		self.refresh   = 3      # Int  - Refresh rate in seconds
										# Menu also updates upon selection
		self.previous=prev

		# Set the title if provided
		self.title = title

	def update_thread(self):
		while not self.closemenu:
			for i in self.items:
				i.do_update()
			time.sleep(self.refresh)

	def set_title(self, title):
		self.title = " " + title
	
	def add_item(self, menu_item):
		self.items.append(menu_item)
	
	def set_noback(self, truefalse):
		self.noback = truefalse
	
	def set_numeric(self, truefalse):
		self.numeric = truefalse

	def enable_tooltips(self, truefalse):
		self.tooltips = truefalse

	def set_refresh(self, rate):
		self.refresh = rate
	
	def set_width(self, width):
		self.width = width
	
	def size(self):
		return len(self.items)

	def close(self):
		self.closemenu = True

	def draw(self, x=None, y=None):

		if x is None:
			x = Menu.x
		if y is None:
			y = Menu.y

		# Start gathering button/tooltip text asynchronously.
		t = threading.Thread(target = self.update_thread)
		t.setDaemon(True)
		t.start()

		# Double check that the menu isn't going to autoclose
		self.closemenu = False
		
		# Make room for the title and tooltips
		# IF they exist.
		if self.title != None:
			x += 2
		elif self.tooltips == True:
			x += 1

		if self.title is not None and self.title != "Loading...":
			self.loading_scr.close()

		# Init stuff
		Menu.screen.clear()
		curses.start_color()
		curses.init_pair(1, curses.COLOR_RED,    curses.COLOR_WHITE)
		curses.init_pair(2, curses.COLOR_YELLOW, curses.COLOR_BLUE)
		Menu.screen.keypad(1)
		pos = 0
		key = ord('z')
		sel_color     = curses.color_pair(2)
		unsel_color   = curses.A_REVERSE
		title_color   = curses.A_REVERSE
		tooltip_color = curses.A_NORMAL
		color = unsel_color
		curses.curs_set(0)

		# Figure out how wide to make the background
		padding = self.width
		for i in self.items:
			le = len(i.get_text()) + 2
			if self.numeric == True:
				le += 4
			if le > padding:
				padding = le

		tlen = len(str(self.title)) + 2
		if tlen > padding:
			padding = tlen

		# Menu loop
		while self.closemenu == False:

			# Draw screen border
			Menu.screen.border(0)

			# Draw the title if it exists
			if self.title != None:
				Menu.screen.addstr(x-2, y, str(" " + self.title).ljust(padding), title_color)

			if len(self.items) > 0:
				# Draw the tooltip/section if it exists
				if self.tooltips == True:
					Menu.screen.move(x-1, 0)
					Menu.screen.clrtoeol()
					Menu.screen.addstr(x-1, y+1, str(self.items[pos].get_tooltip()) + " ", tooltip_color)

			# Draw each item the menu
			for idx, item in enumerate(self.items):
				if pos == idx:
					color = sel_color
				else:
					color = unsel_color
				if self.numeric != False:
					i_num = str(idx + 1) + " - "
				else:
					i_num = ""
				Menu.screen.addstr(idx+x, y, (" " + i_num + item.get_text()).ljust(padding), color)
			
			Menu.screen.refresh()

			# Retrieve key sent from key thread
			if not Menu.keyq.empty() and len(self.items) > 0:
				key = Menu.keyq.get()

				# Key handling
				if key == curses.KEY_DOWN:
					pos += 1
					pos %= self.size()

				elif key == curses.KEY_UP:
					pos -= 1
					pos %= self.size()

				elif key == curses.KEY_LEFT and self.noback == False:
					self.close()
				
				elif key == ord('\n') or key == curses.KEY_RIGHT:
					self.items[pos].do_action()
				
				elif self.numeric == True and (key >= ord("0") and key <= ord(str(self.size()))):
					pos = int(chr(key)) - 1
					self.items[pos].do_action()

				elif key == 3: # CTRL+C
					raise KeyboardInterrupt

			else:
				time.sleep(.025)
		
		# TODO: Clear the menu only, not whole curses screen.
		Menu.screen.clear()

class MenuItem:

	def __init__(self, text, action, *tooltip):
		
		self.disp_text = None
		self.disp_tooltip = ""
		
		self.text = text
		self.action = action

		self.text_update_q = queue.Queue()
		self.tooltip_update_q = queue.Queue()

		if len(tooltip) > 0:
			self.tooltip = tooltip
		else:
			self.tooltip = ""
	
	def set_text(self, text):
		self.text = text

	def set_tooltip(self, tooltip):
		self.tooltip = tooltip
	
	def set_action(self, action):
		self.action = action

	def do_update(self):
		self.update_text()
		self.update_tooltip()

	def get_text(self):
		if self.disp_text == None:
			self.update_text()
		while not self.text_update_q.empty():
			self.disp_text = self.text_update_q.get_nowait()
		return self.disp_text

	def get_tooltip(self):
		while not self.tooltip_update_q.empty:
			self.disp_tooltip = self.tooltip_update_q.get_nowait()
		return self.disp_tooltip

	def update_text(self):
		# Function with args
		if type(self.text) is tuple:
			self.text_update_q.put(self.text[0](*self.text[1:]))
		# Function without args
		elif type(self.text) is not str:
			self.text_update_q.put(self.text())
		# String (hopefully)
		else:
			self.text_update_q.put(self.text)

	def update_tooltip(self):
		# Function with args
		if type(self.tooltip) is tuple:
			self.tooltip_update_q.put(self.tooltip[0](*self.tooltip[1:]))
		# Function without args
		elif type(self.tooltip) is not str:
			self.tooltip_update_q.put(self.tooltip())
		# String (hopefully)
		else:
			self.tooltip_update_q.put(self.tooltip)
		

	def get_action(self):
		return self.action

	def do_action(self):
		if type(self.action) is tuple:
			return self.action[0](*self.action[1:])
		return self.action()

class VBoxCurses:
	def __init__(self):
		self.current_host=""

	def is_local(self):
		return self.current_host == "localhost"

	def main(self, screen):
		Menu.global_init(screen, 2, 4)
		self.select_host()
		
	def remote_cmd(self, cmd):
		if self.is_local():
			return subprocess.check_output(cmd + "; exit 0", shell=True).decode("utf-8")
		else:
			return subprocess.check_output("ssh -t -q " + self.current_host + " " + cmd + "; exit 0", shell=True).decode("utf-8")

	def select_host(self):
		menu = Menu("Choose a host")
		for e in hosts:
			menu.add_item(MenuItem(e, (self.set_host, e)))
		menu.add_item(MenuItem("Quit", menu.close))
		menu.draw()

	def set_host(self, host):
		self.current_host = host
		self.list_vms()

	def list_vms(self):
		
		Menu.show_loading()

		# SSH
		vmstr = self.remote_cmd("VBoxManage list vms")

		# Remove blank lines, quotes, and UUIDs
		vmlist = []
		padding = 0
		for vm in vmstr.strip().split("\n"):
			if vm.strip() == "":
				continue
			vmname = vm.split('"')[1]
			padding = max(padding, len(vmname))
			vmguid = vm.split('"')[2].strip()
			vmlist.append((vmname, vmguid))


		# Set padding to two character after the longest vm-name
		padding += 4

		# Create a menu of VMs
		vmenu = Menu("Choose a VM")
		vmenu.set_noback(True)
		
		for vm in vmlist:
			vmenu.add_item(MenuItem((self.get_vm_status, vm, padding), (self.manage_vm, vm)))

		vmenu.add_item(MenuItem("Back", vmenu.close))
		vmenu.draw()

	def get_vm_property(self, vm, property):
		vminfo = self.remote_cmd("VBoxManage showvminfo --machinereadable " + vm[1])
		for line in vminfo.split("\n"):
			if line.strip().split("=")[0].startswith(property):
				return line.strip().split("=")[1].strip('"')

	def get_vm_status(self, vm, padding):
		state = self.get_vm_property(vm, "VMState")
		return vm[0].ljust(padding) + state

	def get_port(self, vm):
		return self.get_vm_property(vm, "vrdeport")

	def is_on(self, vm):
		return self.get_vm_property(vm, "VMState") == "running"

	def rdp_enabled(self, vm):
		return self.get_port(vm) is not None

	def enable_disable_rdp(self, vm, menu):
		if self.rdp_enabled(vm):
			resp = self.remote_cmd(f"VBoxManage controlvm {vm[1]} vrde off")
		else:
			resp = self.remote_cmd(f"VBoxManage controlvm {vm[1]} vrde on")
		menu.close()
		return resp

	def set_vrde_to_rdp(self):
		return self.remote_cmd('VBoxManage setproperty vrdeextpack "Oracle VM VirtualBox Extension Pack"')

	def manage_vm(self, vm):
		Menu.show_loading()

		if self.is_on(vm):
			port = self.get_port(vm)
			port = str(port) if port else "OFF"
			cmenu = Menu(vm[0] + " | RDP: " + port)
			if self.rdp_enabled(vm):
				cmenu.add_item(MenuItem("Connect RDP", (self.connect_rdp, port)))
		else:
			cmenu = Menu(vm[0] + " | OFF")
		
		cmenu.add_item(MenuItem("Enable/Disable RDP", (self.enable_disable_rdp, vm, cmenu)))
		cmenu.add_item(MenuItem("Power Menu",      (self.power_menu, vm, cmenu)))
		cmenu.add_item(MenuItem("Create Snapshot", (self.create_snapshot, vm)))
		cmenu.add_item(MenuItem("Back",            cmenu.close))
		
		cmenu.draw()

	def connect_rdp(self, port):
		# Check for active X11 Environment
		if self.no_desktop() == False:
			self.set_vrde_to_rdp()
			target = self.current_host + ":" + str(port)
			if not self.is_local():
				local_port = random.randint(10000, 65534)
				cmd = f"ssh -TqfN -L{str(local_port)}:127.0.0.1:{str(port)} {self.current_host}"
				subprocess.Popen(cmd, stdout=None, stderr=None, shell=True)
				target = f"127.0.0.1:{str(local_port)}"

			cmd = "xfreerdp /dynamic-resolution /w:1600 /h:900 /cert:ignore +auto-reconnect /v:" + target + " &>/dev/null 2>&1"
			subprocess.Popen(cmd, stdout=open(os.devnull, "w"), stderr=subprocess.STDOUT, shell=True)
		
	# Return True if vcr is being run remotely
	@staticmethod
	def no_desktop():
		return (os.environ.get('DISPLAY') == None)

	def create_snapshot(self, vm):
		cmd = f'VBoxManage snapshot {vm[1]} take $(date +%Y-%m-%d_%H-%M) & > /dev/null 2>&1'
		self.remote_cmd(cmd)

	def run_and_go_back(self, cmd, menu):
		self.remote_cmd(cmd)
		menu.close()
		menu.previous.close()

	def power_menu(self, vm, prev):
		Menu.show_loading()

		vmname = vm[0]
		vmguid = vm[1]

		normal     = "VBoxManage startvm "      + vmguid + " --type gui & > /dev/null 2>&1"
		headless   = "VBoxManage startvm "      + vmguid + " --type headless & > /dev/null 2>&1"
		detached   = "VBoxManage startvm "      + vmguid + " --type separate & > /dev/null 2>&1"
		resume     = "VBoxManage controlvm "    + vmguid + " resume & > /dev/null 2>&1"
		acpioff    = "VBoxManage controlvm "    + vmguid + " acpipowerbutton & > /dev/null 2>&1"
		forceoff   = "VBoxManage controlvm "    + vmguid + " poweroff & > /dev/null 2>&1"
		savestate  = "VBoxManage controlvm "    + vmguid + " savestate & > /dev/null 2>&1"
		reset      = "VBoxManage controlvm "    + vmguid + " reset & > /dev/null 2>&1"
		discard    = "VBoxManage discardstate " + vmguid + " & > /dev/null 2>&1"

		state = self.get_vm_property(vm, "VMState")


		pmenu = Menu("Power Options for: " + vmname, prev)
		if state == "running":
			pmenu.add_item(MenuItem("Turn Off (Save State)", (self.run_and_go_back, savestate, pmenu)))
			pmenu.add_item(MenuItem("Turn Off (ACPI)",       (self.run_and_go_back, acpioff, pmenu)))
			pmenu.add_item(MenuItem("Turn Off (Poweroff)",   (self.run_and_go_back, forceoff, pmenu)))
			pmenu.add_item(MenuItem("Reset (Force)",         (self.run_and_go_back, reset, pmenu)))
		elif state == "saved":
			pmenu.add_item(MenuItem("Resume Saved State",    (self.run_and_go_back, resume, pmenu)))
			pmenu.add_item(MenuItem("Discard Saved State",   (self.run_and_go_back, discard, pmenu)))
		else:
			pmenu.add_item(MenuItem("Turn On (Headless)",    (self.run_and_go_back, headless, pmenu)))
			pmenu.add_item(MenuItem("Turn On (Detached)",    (self.run_and_go_back, detached, pmenu)))
			pmenu.add_item(MenuItem("Turn On (GUI)",         (self.run_and_go_back, normal, pmenu)))
		
		pmenu.add_item(MenuItem("Back", pmenu.close))
		pmenu.draw()

if __name__ == '__main__':
	try:
		vbox = VBoxCurses()
		curses.wrapper(vbox.main)
	except KeyboardInterrupt:
		print("Bye!")
		sys.exit(0)
